{"version":3,"sources":["firebase/firebase-config.js","components/SidebarChat.js","redux/const.js","redux/actions.js","components/Sidebar.js","components/Mainchat.js","components/InviteToRoom.js","components/Login.js","components/Logout.js","components/App.js","reportWebVitals.js","redux/reducer.js","redux/reduxStore.js","index.js"],"names":["db","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","msg","id","name","useState","Math","random","avaSeed","useSelector","state","user","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","console","info","to","className","Avatar","src","message","trim","length","slice","SET_USER","SET_ROOM_LIST","SET_MAIN_CHAT","setUserInfoAction","newUserInfo","type","payload","setMainChatInfoAction","newMainChatInfo","currentRoomsData","Sidebar","rooms","setRooms","roomData","setRoomData","roomId","unsubscribe","roomSnapshot","includes","a","userRef","userSnapshot","chat","x","createChat","roomName","prompt","replace","alert","add","creater","dateCreated","FieldValue","serverTimestamp","newRoomRef","memRef","role","log","update","arrayUnion","photoURL","IconButton","onClick","placeholder","InviteFriendDiaglog","props","mainChatInfo","mainChat","inviteLink","window","location","origin","Dialog","onClose","handleToggleDialog","aria-labelledby","open","DialogTitle","List","Typography","variant","gutterBottom","style","padding","ListItem","autoFocus","ListItemAvatar","ListItemText","primary","MoreVertMenu","React","setOpen","anchorRef","useRef","handleClose","event","openDialog","setOpenDialog","dialogId","newState","newOpenDialog","ref","aria-controls","undefined","aria-haspopup","Popper","anchorEl","current","transition","disablePortal","placement","TransitionProps","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","MenuItem","MainChat","setAvaSeed","msgInput","setMsgInput","useParams","setRoomName","chatBodyRef","memInfoList","setMemInfoList","dispatch","useDispatch","roomRef","get","exists","querySnapshot","listPromise","forEach","push","Promise","all","then","results","newMemInfoList","i","addEventListener","target","currentTarget","scroll","top","scrollHeight","behavior","formatMsgTimeStamp","d","Date","hours","getHours","minutes","getMinutes","ampm","strTime","getDate","Intl","DateTimeFormat","month","format","getFullYear","sender","uid","hasOwnProperty","timestamp","toDate","size","onSubmit","e","preventDefault","value","onChange","InviteToRoom","roomInfo","setRoomInfo","Button","joined","Login","setPersistence","Auth","Persistence","LOCAL","signInWithPopup","Logout","signOut","catch","error","App","loading","setLoading","onAuthStateChanged","displayName","avatarUrl","set","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","roomList","newRoomList","reduxStore","defaultState","createStore","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.e6167384.chunk.js","sourcesContent":["import firebase from 'firebase'\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_APIKEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;","import '../assets/css/SidebarChat.scss';\nimport { Avatar } from '@material-ui/core';\nimport AddIcon from '@mui/icons-material/Add';\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport db from '../firebase/firebase-config';\nimport { doc, updateDoc, arrayUnion, arrayRemove } from \"firebase/firestore\";\n\nimport { useSelector } from 'react-redux';\n\nfunction SidebarChat({ id, name }) {\n    const [avaSeed, setAvaSeed] = useState(Math.random());\n    const user = useSelector(state => state.user);\n    const [messages, setMessages] = useState(\"\");\n\n    useEffect(() => {\n        if (id) {\n            db.collection('rooms').doc(id).collection('messages')\n                .orderBy('timestamp', 'desc')\n                .onSnapshot((snapshot) => setMessages(snapshot.docs.map(doc => doc.data())));\n        }\n    }, [id]);\n\n    useEffect(() => {\n        console.info(id,' => ',messages);\n    },[messages]);\n\n    const cutShortMsg = (msg) => {\n        if(!msg) return \"\";\n        msg = msg.trim();\n        if(msg.length > 50) msg = msg.slice(0,30) + \"...\";\n        return msg;\n    }\n\n    return (\n        <Link to={\"/rooms/\" + id}>\n            <div className=\"sidebarChat\">\n                <Avatar src={`https://avatars.dicebear.com/api/bottts/${avaSeed}.svg`} />\n                <div className=\"sidebarChat_info\">\n                    <h2>{name}</h2>\n                    <p>{cutShortMsg(messages[0]?.message)}</p>\n                </div>\n            </div>\n        </Link>\n    )\n}\n\nexport default SidebarChat;","export const SET_USER = 'SET_USER';\nexport const SET_ROOM_LIST = 'SET_ROOM_LIST';\nexport const SET_MAIN_CHAT = 'SET_MAIN_CHAT';","import { SET_USER, SET_ROOM_LIST, SET_MAIN_CHAT } from './const';\n\nlet setUserInfo = (newUserInfo = null) => {\n    return {\n        type : SET_USER,\n        payload : {\n            newUserInfo : newUserInfo\n        }\n    }\n}\n\nlet setRoomList = (newRoomList = {}) => {\n    return {\n        type : SET_ROOM_LIST,\n        payload : {\n            newRoomList : newRoomList\n        }\n    }\n}\n\nlet setMainChat = (newMainChatInfo = {}) => {\n    return {\n        type : SET_MAIN_CHAT,\n        payload: {\n            newMainChatInfo : newMainChatInfo\n        }\n    }\n}\n\nexport let setUserInfoAction = setUserInfo;\nexport let setRoomListAction = setRoomList;\nexport let setMainChatInfoAction = setMainChat;","import { useState, useEffect } from 'react';\nimport '../assets/css/Sidebar.scss';\nimport { Avatar, IconButton } from '@material-ui/core';\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\nimport AddIcon from '@mui/icons-material/Add';\nimport SideBarChat from './SidebarChat';\n\n// firebase\nimport db from '../firebase/firebase-config';\nimport firebase from \"firebase\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setRoomListAction } from '../redux/actions';\n\nconst currentRoomsData = {};\n\nfunction Sidebar() {\n\n    const user = useSelector(state => state.user);\n    //const rooms = useSelector(state => state.roomList);\n    //const dispatch = useDispatch();\n\n    const [rooms, setRooms] = useState([]);\n    const [roomData, setRoomData] = useState({});\n\n    useEffect(() => {\n        rooms.map(roomId => {\n            let unsubscribe = db.collection(\"rooms\").doc(roomId).onSnapshot(roomSnapshot => {\n                // stop listing to changes of this room\n                if (!rooms.includes(roomSnapshot.id)) {\n                    delete currentRoomsData[roomId];\n                    unsubscribe();\n                } else {\n                    currentRoomsData[roomId] = roomSnapshot.data();\n                    setRoomData({...currentRoomsData});\n                }\n            })\n\n            return false;\n        });\n    }, [rooms]);\n\n    useEffect(async () => {\n\n        user.userRef.onSnapshot(userSnapshot => {\n            setRooms(userSnapshot.data().chat.map(x => x.id));\n        });\n\n        return\n    }, []);\n\n    const createChat = async () => {\n        let roomName = prompt(\"Please enter name for the new chat\");\n\n        if (roomName) {\n            // do something\n            roomName = roomName.replace(/^\\s+|\\s+$/gm, '');\n\n            if (roomName.length <= 0 || roomName.length > 100) {\n                alert('Room name cannot be empty or too long!');\n                return;\n            }\n\n            // create new room\n            let newRoomRef = await db.collection(\"rooms\").add({\n                creater: user.userRef,\n                name: roomName,\n                dateCreated: firebase.firestore.FieldValue.serverTimestamp(),\n                type: \"group_chat\"\n            });\n\n            // set current user as admin of the new room\n            await newRoomRef.collection('members').add({\n                memRef: user.userRef,\n                role: \"admin\"\n            });\n\n            console.log(newRoomRef)\n\n            // add this chat room into the chatroom list of current user\n            await user.userRef.update({\n                chat: firebase.firestore.FieldValue.arrayUnion(newRoomRef)\n            });\n\n            console.log('create new Room ', roomName, ' successfully!!!')\n        }\n    }\n\n    useEffect(() => {\n        console.log(roomData);\n    },[roomData]);\n\n\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar__header\">\n                <div className=\"sidebar__headerLeft\">\n                    <Avatar src={user?.photoURL} />\n                </div>\n                <div className=\"sidebar__headerRight\">\n                    <IconButton onClick={createChat}>\n                        <AddIcon />\n                    </IconButton>\n\n                    <IconButton>\n                        <ChatIcon />\n                    </IconButton>\n                    <IconButton>\n                        <MoreVertIcon />\n                    </IconButton>\n                </div>\n            </div>\n            <div className=\"sidebar__search\">\n                <div className=\"sidebar__searchContainer\">\n                    <SearchOutlined />\n                    <input type=\"text\" placeholder='Search Donus' />\n                </div>\n            </div>\n            <div className=\"sidebar__chats\">\n                {rooms.map(roomId => (\n                    <SideBarChat key={roomId} id={roomId} name={roomData[roomId] ? roomData[roomId].name : \"\"} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar;","import '../assets/css/Mainchat.scss';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Avatar, IconButton } from '@material-ui/core';\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport AddReactionIcon from '@mui/icons-material/AddReaction';\nimport MicIcon from '@material-ui/icons/Mic';\nimport SendIcon from '@mui/icons-material/Send';\nimport ImageIcon from '@mui/icons-material/Image';\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport PersonIcon from '@material-ui/icons/Person';\nimport AddIcon from '@material-ui/icons/Add';\nimport Typography from '@material-ui/core/Typography';\nimport { blue } from '@material-ui/core/colors';\n\nimport db from '../firebase/firebase-config';\nimport firebase from \"firebase\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setMainChatInfoAction } from '../redux/actions';\n\nfunction InviteFriendDiaglog(props) {\n    const mainChatInfo = useSelector(state => state.mainChat);\n\n    console.info(mainChatInfo);\n\n    const inviteLink = window.location.origin + \"/invite/\" + mainChatInfo.id;\n\n    return (\n        <Dialog className='invite_friend_dialog' onClose={() => props.handleToggleDialog(props.id, false)} aria-labelledby=\"simple-dialog-title\" open={props.open}>\n            <DialogTitle>Invite friends to {mainChatInfo.name}</DialogTitle>\n            <List>\n                <Typography className='dialog_title' variant=\"subtitle2\" gutterBottom style={{ padding: \"0 20px\" }}>\n                    Send this invite link to a friend\n                </Typography>\n                <ListItem autoFocus>\n                    <ListItemAvatar>\n                        <Avatar>\n                            <AddIcon />\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText primary={inviteLink} />\n                </ListItem>\n            </List>\n        </Dialog>\n    )\n}\nfunction MoreVertMenu() {\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n\n    const handleToggle = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event) => {\n        setOpen(false);\n    };\n\n    const [openDialog, setOpenDialog] = useState({\n        'notification-settings': false,\n        'invite-people': false,\n        'change-nickname': false,\n        'members': false,\n        'leave-chat': false\n    });\n\n    const handleToggleDialog = (dialogId, newState = true) => {\n        let newOpenDialog = { ...openDialog };\n        newOpenDialog[dialogId] = newState;\n        setOpenDialog(newOpenDialog);\n    }\n\n    return (\n        <>\n            <IconButton ref={anchorRef}\n                aria-controls={open ? \"chat-utils-btn\" : undefined}\n                aria-haspopup=\"true\"\n                onClick={handleToggle}\n                className=\"chat_utils_btn\"\n            >\n                <MoreVertIcon />\n            </IconButton>\n            <Popper\n                className=\"chat_utils_menu\"\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                placement=\"bottom-end\"\n            >\n                {({ TransitionProps, placement }) => (\n                    <Grow\n                        {...TransitionProps}\n                        style={{\n                            transformOrigin:\n                                placement === \"bottom\" ? \"right top\" : \"right bottom\"\n                        }}\n                    >\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MenuList autoFocusItem={open} id=\"menu-list-grow\">\n                                    <MenuItem onClick={() => { handleClose(); handleToggleDialog('notification-settings'); }}>Notification settings</MenuItem>\n                                    <MenuItem onClick={() => { handleClose(); handleToggleDialog('change-nickname'); }}>Change nickname</MenuItem>\n                                    <MenuItem onClick={() => { handleClose(); handleToggleDialog('members'); }}>Members</MenuItem>\n                                    <MenuItem onClick={() => { handleClose(); handleToggleDialog('invite-people'); }}>Invite people</MenuItem>\n                                    <MenuItem onClick={() => { handleClose(); handleToggleDialog('leave-chat'); }}>Leave chat</MenuItem>\n                                </MenuList>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Grow>\n                )}\n            </Popper>\n            <InviteFriendDiaglog id='invite-people' open={openDialog['invite-people']} handleToggleDialog={handleToggleDialog} />\n        </>\n    );\n}\n\nfunction MainChat() {\n\n    const [avaSeed, setAvaSeed] = useState(Math.random());\n    const [msgInput, setMsgInput] = useState(\"\");\n    const { roomId } = useParams();\n    const [roomName, setRoomName] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n    const chatBodyRef = useRef(null);\n    const [memInfoList, setMemInfoList] = useState({});\n    const dispatch = useDispatch();\n\n    const user = useSelector(state => state.user);\n\n    useEffect(async () => {\n        if (roomId) {\n\n            let roomRef = db.collection(\"rooms\").doc(roomId);\n\n            if (!(await roomRef.get()).exists) return\n\n            roomRef.onSnapshot((snapshot) => {\n                setRoomName(snapshot.data().name);\n                dispatch(setMainChatInfoAction({ ...snapshot.data(), id: snapshot.id }));\n            });\n\n            roomRef.collection(\"messages\")\n                .orderBy('timestamp', 'asc')\n                .onSnapshot(snapshot => setMessages(snapshot.docs.map(doc => doc.data())));\n\n            roomRef.collection(\"members\")\n                .onSnapshot((querySnapshot) => {\n                    let listPromise = [];\n\n                    querySnapshot.forEach((doc) => {\n                        listPromise.push(doc.data().memRef.get());\n                    });\n\n                    Promise.all(listPromise).then((results) => results.map(doc => ({ ...doc.data(), id: doc.id })))\n                        .then(results => {\n\n                            let newMemInfoList = {};\n                            for (let i = 0; i < results.length; ++i) {\n                                newMemInfoList[results[i].id] = results[i];\n                            }\n                            setMemInfoList({ ...memInfoList, ...newMemInfoList });\n                        });\n                })\n        }\n        setAvaSeed(Math.random());\n    }, [roomId]);\n\n    useEffect(() => {\n        console.info(messages);\n    }, [messages]);\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        let msg = msgInput.trim();\n        if (msg == '') return;\n\n        db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\n            message: msg,\n            sender: user.userRef,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        });\n        setMsgInput(\"\");\n    }\n\n    useEffect(() => {\n        if (chatBodyRef) {\n            chatBodyRef.current.addEventListener('DOMNodeInserted', event => {\n                const { currentTarget: target } = event;\n                target.scroll({ top: target.scrollHeight, behavior: 'smooth' });\n            });\n        }\n    }, [])\n\n    const formatMsgTimeStamp = (d) => {\n        if(!(d instanceof Date)) return \"\"\n\n        var hours = d.getHours();\n        var minutes = d.getMinutes();\n        var ampm = hours >= 12 ? \"PM\" : \"AM\";\n        hours = hours % 12;\n        hours = hours ? hours : 12; // the hour \"0\" should be \"12\"\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\n        var strTime = hours + \":\" + minutes + \" \" + ampm;\n        return d.getDate() + \" \" + new Intl.DateTimeFormat('en', { month: 'short' }).format(d) + \" \" + d.getFullYear() + \" \" + strTime;\n    }\n\n    return (\n        <div className=\"main_chat\">\n            <div className=\"chat__header\">\n                <Avatar src={`https://avatars.dicebear.com/api/bottts/${avaSeed}.svg`} />\n                <div className=\"chat__headerInfo\">\n                    <h3>{roomName}</h3>\n                    <p>Last seen at ...</p>\n                </div>\n\n                <div className=\"chat__headerRight\">\n                    <IconButton>\n                        <SearchOutlined />\n                    </IconButton>\n\n                    <IconButton>\n                        <AttachFileIcon />\n                    </IconButton>\n                    <MoreVertMenu />\n                </div>\n            </div>\n            <div className=\"chat__body\" ref={chatBodyRef}>\n                {\n                    messages.map(message => (\n                        <div className={\"chat__message \" + (message.sender.id == user.uid && \"chat__receiver\")}>\n                            <p className=\"message__content\">\n                                {message.message}\n                            </p>\n                            <div className=\"message__info\">\n                                <span className=\"message__name\">{memInfoList.hasOwnProperty(message.sender.id) ? memInfoList[message.sender.id].name : \"\"}</span>\n                                <span className=\"message__timestamp\">{\n                                    formatMsgTimeStamp(message.timestamp?.toDate())\n                                }</span>\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n            <div className=\"chat__footer\">\n                <IconButton size=\"small\">\n                    <AddReactionIcon />\n                </IconButton>\n                <IconButton size=\"small\">\n                    <ImageIcon />\n                </IconButton>\n                <form onSubmit={sendMessage}>\n                    <input type=\"text\" placeholder=\"Type your message here ...\" value={msgInput} onChange={(e) => setMsgInput(e.target.value)} />\n                    <button type=\"submit\">Send</button>\n                </form>\n\n                <IconButton size=\"small\">\n                    <MicIcon />\n                </IconButton>\n            </div>\n        </div>\n    )\n}\n\nexport default MainChat;","import { useParams } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport '../assets/css/InviteToRoom.scss';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport db from '../firebase/firebase-config';\nimport firebase from \"firebase\";\n\nfunction InviteToRoom() {\n    const { roomId } = useParams();\n    const avaSeed = Math.random();\n    const [roomInfo, setRoomInfo] = useState({});\n    const user = useSelector(state => state.user);\n\n    useEffect(() => {\n        console.log(roomId);\n        db.collection(\"rooms\").doc(roomId).onSnapshot((snapshot) => {\n            let roomInfo = snapshot.data();\n            setRoomInfo(roomInfo);\n        });\n    }, [roomId]);\n\n    console.log(roomInfo);\n\n    const joinRoom = () => {\n        if (user && user.userRef) {\n            user.userRef.get().then(async (snapshot) => {\n\n                let joined = false;\n                for (let i = 0; i < snapshot.data().chat.length; ++i) {\n                    if (snapshot.data().chat[i].id == roomId) {\n                        joined = true;\n                        break;\n                    }\n                }\n                let roomRef = db.collection(\"rooms\").doc(roomId);\n                if (!joined) {\n                    // now join the room\n                    await roomRef.collection('members').add({\n                        memRef: user.userRef,\n                        role: \"normal\"\n                    });\n\n                    // add this chat room into the chatroom list of current user\n                    await user.userRef.update({\n                        chat: firebase.firestore.FieldValue.arrayUnion(roomRef)\n                    });\n                }else{\n                    alert('you have joined this room already!')\n                }\n                \n                window.location = \"/rooms/\" + roomId;\n            });\n        } else {\n            alert('You should sign in first!!!');\n        }\n    }\n\n    return (\n        <>\n            <div className=\"invite__container\">\n                <div className=\"invite__box\">\n                    <img className='invite__img' src={`https://avatars.dicebear.com/api/bottts/${avaSeed}.svg`} />\n                    <div className=\"invite__text\">\n                        <p>Welcome to</p>\n                        <h3>{roomInfo.name ? roomInfo.name : \"\"}</h3>\n                    </div>\n\n                    <Button type=\"submit\" className=\"accept__invite__btn\" onClick={joinRoom}>Accept invite</Button>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default InviteToRoom;","import '../assets/css/Login.scss';\nimport { useState, useEffect } from 'react';\nimport { Button } from \"@material-ui/core\";\nimport db, { auth, provider } from '../firebase/firebase-config';\nimport firebase from \"firebase\";\n\nfunction Login() {\n\n    const signIn = () => {\n        auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL)\n            .then(() => {\n                // Existing and future Auth states are now persisted in the current\n                // session only. Closing the window would clear any existing state even\n                // if a user forgets to sign out.\n                // ...\n                // New sign-in will be persisted with session persistence.\n                return auth.signInWithPopup(provider);\n            });\n    }\n    return (\n        <div className=\"login\">\n            <div className=\"login__container\">\n                <img src=\"https://img.icons8.com/color/452/whatsapp--v1.png\" />\n                <div className=\"login__text\">\n                    <h1>Sign in Donus</h1>\n                </div>\n\n                <Button type=\"submit\" onClick={signIn}>Sign in with Google</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Login;","import { useEffect } from 'react';\nimport firebase from \"firebase\";\n\nfunction Logout() {\n\n    useEffect(() => {\n        firebase.auth().signOut().then(() => {\n            // Sign-out successful.\n            window.location = \"/\";\n            console.log(\"Sign-out successful!\");\n        }).catch((error) => {\n            console.log(error);\n            // An error happened.\n        });\n    }, []);\n\n    return (\n        <>\n            WTF\n        </>\n    )\n}\n\nexport default Logout;","import { useState, useEffect } from 'react';\nimport '../assets/css/App.scss';\nimport Sidebar from '../components/Sidebar';\nimport MainChat from './Mainchat';\nimport InviteToRoom from './InviteToRoom';\nimport Login from './Login';\nimport Logout from './Logout';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link,\n    Switch,\n    Redirect,\n    useLocation\n} from \"react-router-dom\";\n\n// redux\nimport { setUserInfoAction } from '../redux/actions';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport db, { auth } from '../firebase/firebase-config';\nimport firebase from \"firebase\";\n\nfunction App() {\n    const user = useSelector(state => state.user);\n    const dispatch = useDispatch();\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged(async (user) => {\n            if (user) {\n                console.log('ok logged in');\n                console.log(user);\n\n                const userRef = db.collection('users').doc(user.uid);\n\n                // update info for this user in the database\n\n                let userInfo = await userRef.get();\n\n                if (userInfo.exists) {\n                    await userRef.update({\n                        name: user.displayName,\n                        avatarUrl: user.photoURL\n                    });\n                } else {\n                    await userRef.set({\n                        name: user.displayName,\n                        avatarUrl: user.photoURL,\n                        chat: []\n                    });\n                }\n\n                // update user info in the data layer\n                dispatch(setUserInfoAction({\n                    ...user,\n                    userRef: userRef\n                }));\n            } else {\n                console.log('not logged in yet');\n                dispatch(setUserInfoAction(null));\n            }\n            setLoading(false);\n        });\n    }, []);\n\n    return (\n        <Router>\n            <div className=\"App\">\n                <Switch>\n                    <Route path=\"/invite/:roomId\">\n                        <InviteToRoom />\n                    </Route>\n                    {!loading && (user ?\n                        <div className=\"app_body\">\n                            <Route path=\"/app\">\n                                App\n                            </Route>\n                            <Route path=\"/rooms/:roomId\">\n                                <Sidebar />\n                                <MainChat />\n                            </Route>\n                            <Route exact path=\"/logout\">\n                                <Logout />\n                            </Route>\n                        </div>\n                        :\n                        <Route path=\"*\">\n                            <Login />\n                        </Route>\n                    )}\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport { SET_USER, SET_ROOM_LIST, SET_MAIN_CHAT } from './const';\n\nlet setUserInfoReducer = (state = null,action) => {\n    switch(action.type){\n        case SET_USER : \n            return action.payload.newUserInfo;\n\n        default : return state;\n    }\n}\n\nlet setRoomsReducer = (state = {}, action) => {\n    switch(action.type){\n        case SET_ROOM_LIST:\n            return action.payload.newRoomList;\n\n        default: return state;\n    }\n}\n\nlet setMainChatReducer = (state = {}, action) => {\n    switch(action.type){\n        case SET_MAIN_CHAT:\n            return action.payload.newMainChatInfo;\n\n        default: return state;\n    }\n}\nlet rootReducer = combineReducers({\n    user : setUserInfoReducer,\n    roomList : setRoomsReducer,\n    mainChat : setMainChatReducer\n});\n\nexport default rootReducer;","import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from './reducer';\n\nlet reduxStore = (defaultState = {\n    user: null,\n    roomList : {},\n    mainChat : {}\n}) => {\n    return createStore(rootReducer, defaultState);\n}\n\nexport default reduxStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport reduxStore from './redux/reduxStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {reduxStore()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}